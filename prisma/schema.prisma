// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Post {
  id          Int           @id @default(autoincrement())
  title       String?
  description String?
  status      Status        @default(PENDING)
  email  String
  images      Image[]       @relation("PostImages")
  tags        PostsOnTags[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Image {
  id          Int            @id @default(autoincrement())
  title       String?
  description String?
  imageUrl    String
  width       Int            @default(0)
  height      Int            @default(0)
  status      Status         @default(PENDING)
  email String
  post        Post?          @relation(fields: [postId], references: [id], name: "PostImages")
  postId      Int?
  tags        ImagesOnTags[]

  order      Int      @default(0)
  tools      String[]
  techniques String[]

  prompt        String @default("")
  nevPrompt     String @default("")
  guidanceScale Int    @default(0)
  steps         Int    @default(0)
  sampler       String @default("")
  seed          Int    @default(0)

  isFeatured Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  images      ImagesOnTags[]
  posts       PostsOnTags[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PostsOnTags {
  post       Post     @relation(fields: [postId], references: [id])
  postId     Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())

  @@id([postId, tagId])
}

model ImagesOnTags {
  image      Image    @relation(fields: [imageId], references: [id])
  imageId    Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int
  assignedAt DateTime @default(now())

  @@id([imageId, tagId])
}


// endregion

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Action {
  APPROVED
  REJECTED
  PUBLISHED
}
