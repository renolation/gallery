// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  password  String
  roleId    String    @default("3bdb07a9-753e-4ac5-8238-f320aec857dc") // Replace with the actual ID of the member role
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  images    Image[]   @relation("UserImages")
  posts     Post[]    @relation("UserPosts")
}

model Post {
  id          String   @id @default(uuid())
  title       String?
  description String?
  userId      String
  status      Status   @default(PENDING)
  user        User     @relation(fields: [userId], references: [id], name: "UserPosts")
  images      Image[]  @relation("PostImages")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id          String         @id @default(uuid())
  title       String?
  description String?
  imageUrl    String
  width       Int            @default(0)
  height      Int            @default(0)
  status      Status         @default(PENDING)
  uploadedBy  User           @relation(fields: [userId], references: [id], name: "UserImages")
  userId      String
  post        Post           @relation(fields: [postId], references: [id], name: "PostImages")
  postId      String
  tags        ImagesOnTags[]
  tagId       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Tag {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  images      ImagesOnTags[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ImagesOnTags {
  image      Image    @relation(fields: [imageId], references: [id])
  imageId    String
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([imageId, tagId])
}

//region Role based access control
model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  permissions Permission[] @relation("RolePermission")
  users       User[]
  parentId    String? // Self-referencing field for hierarchy
  parent      Role?        @relation("RoleHierarchy", fields: [parentId], references: [id])
  children    Role[]       @relation("RoleHierarchy")
}

model Permission {
  id    String @id @default(uuid())
  name  String @unique
  roles Role[] @relation("RolePermission")
}

//endregion

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Action {
  APPROVED
  REJECTED
  PUBLISHED
}
